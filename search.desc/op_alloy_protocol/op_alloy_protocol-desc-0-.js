searchState.loadedDescShard("op_alloy_protocol", 0, "op-alloy-protocol\nBatchTransaction is a set of Frames that can be Into::into …\nBlock Header Info\nFailed to decode the L1BlockInfoTx from the deposit …\nCHANNEL_ID_LENGTH is the length of the channel ID.\nA Channel is a set of batches that are split into at least …\nThe channel is closed.\nAn error returned when adding a frame to a channel.\nChannelId is an opaque identifier for a channel.\nThe version of the derivation pipeline.\nFrame data length mismatch.\nThe frame data is too large.\nThe frame data is too short.\nFJORD_MAX_RLP_BYTES_PER_CHANNEL is the maximum amount of …\nCount the tagging info as 200 in terms of buffer size.\nThe first payload transaction is not a deposit transaction.\nA channel frame is a segment of a channel’s data.\nThe frame number is beyond the end frame.\nA frame decoding error.\nError parsing the frame data.\nThe frame id does not match the channel id.\nThe frame number is already in the channel.\nFrame parsing error.\nAn error that can occur when converting an OpBlock to an …\nError decoding the frame data length.\nThe genesis block hash does not match the expected value.\nError decoding the frame id.\nError decoding the frame number.\nL2 Block Header Info\nFrames cannot be larger than 1MB.\nMAX_RLP_BYTES_PER_CHANNEL is the maximum amount of bytes …\nThe L2 block is missing the L1 info deposit transaction.\nNo frames to parse.\nNo frames decoded.\nFailed to decode the first transaction into an OpTxEnvelope…\nThe first payload transaction has an unexpected type.\nUnsupported derivation version.\nTransaction Types\nBlock Types for Optimism.\nThis module contains the L1BlockInfoTx type, and various …\nThe base BlockInfo\nChannel Types\nTrue if the last frame has been buffered\nThe data within the frame.\nContains deposit transaction types and helper methods.\nEstimated memory size, used to drop the channel if we have …\nFrame Types\nThe frames in the batch.\nThe block hash\nThe highest frame number that has been ingested\nThe highest L1 inclusion block that a frame was included in\nThe unique idetifier for the frame.\nThe unique identifier for this channel\nStore a map of frame number to frame for constant time …\nWhether or not the frame is the last in the sequence.\nThe L1 origin BlockNumHash\nThe frame number of the frame where <code>is_last</code> is true No …\nThe block number\nThe number of the frame.\nThe block that the channel is currently open at\nThe parent block hash\nThe sequence number of the L2 block\nThe size of the potential transaction.\nReturns if the given <code>value</code> is a deposit transaction.\nThe block timestamp\nUtility methods used by protocol types.\nBatchTransaction is a set of Frames that can be Into::into …\nThe frames in the batch.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns if the transaction has reached the max frame count.\nReturns the size of the transaction.\nThe size of the potential transaction.\nReturns the BatchTransaction as a Bytes.\nBlock Header Info\nFailed to decode the L1BlockInfoTx from the deposit …\nThe first payload transaction is not a deposit transaction.\nAn error that can occur when converting an OpBlock to an …\nThe genesis block hash does not match the expected value.\nL2 Block Header Info\nThe L2 block is missing the L1 info deposit transaction.\nFailed to decode the first transaction into an OpTxEnvelope…\nThe first payload transaction has an unexpected type.\nThe base BlockInfo\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an L2BlockInfo from a given OpBlock and …\nThe block hash\nReturns the block ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 origin BlockNumHash\nInstantiates a new BlockInfo.\nInstantiates a new L2BlockInfo.\nThe block number\nThe parent block hash\nThe sequence number of the L2 block\nThe block timestamp\nFailed to parse the base fee scalar.\nA Bedrock L1 info transaction\nAn error type for parsing L1 block info transactions.\nAn Ecotone L1 info transaction\nFailed to parse the EIP-1559 denominator.\nFailed to parse the EIP-1559 elasticity parameter.\nA Holocene L1 info transaction\nFailed to parse the L1 blob base fee scalar.\nRepresents the fields within a Bedrock L1 block info …\nRepresents the fields within an Ecotone L1 block info …\nRepresents the fields within a Holocene L1 block info …\nThe L1BlockInfoTx enum contains variants for the different …\nThe address of the L1 Block contract\nThe depositor address of the L1 info transaction\nThe length of an L1 info transaction in Bedrock.\nThe length of an L1 info transaction in Ecotone.\nThe length of an L1 info transaction in Holocene.\nThe 4 byte selector of the “…\nThe 4 byte selector of “setL1BlockValuesEcotone()”\nThe 4 byte selector of “setL1BlockValuesHolocene()”\nThe type byte identifier for the L1 scalar format in …\nThe system transaction gas limit post-Regolith\nThe current L1 origin block’s basefee\nThe current L1 origin block’s basefee\nThe current L1 origin block’s basefee\nThe fee scalar for L1 data\nThe fee scalar for L1 data\nReturns the batcher address for the info transaction\nThe address of the batch submitter\nThe address of the batch submitter\nThe address of the batch submitter\nThe current blob base fee on L1\nThe current blob base fee on L1\nThe fee scalar for L1 blobspace data\nThe fee scalar for L1 blobspace data\nReturns the block hash for the L1BlockInfoTx.\nThe current L1 origin block’s hash\nThe current L1 origin block’s hash\nThe current L1 origin block’s hash\nDecodes the L1BlockInfoEcotone object from ethereum …\nDecodes the L1BlockInfoBedrock object from ethereum …\nDecodes the L1BlockInfoEcotone object from ethereum …\nDecodes the L1BlockInfoHolocene object from ethereum …\nThe EIP-1559 denominator\nThe EIP-1559 elasticity parameter\nEncodes the L1BlockInfoTx object into Ethereum transaction …\nEncodes the L1BlockInfoBedrock object into Ethereum …\nEncodes the L1BlockInfoEcotone object into Ethereum …\nEncodes the L1BlockInfoHolocene object into Ethereum …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the L1 BlockNumHash for the info transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the L1 fee overhead for the info transaction. …\nThe fee overhead for L1 data\nThe fee scalar for L1 data\nThe current L1 origin block number\nThe current L1 origin block number\nThe current L1 origin block number\nReturns the sequence number for the info transaction\nThe current sequence number\nThe current sequence number\nThe current sequence number\nThe current L1 origin block’s timestamp\nThe current L1 origin block’s timestamp\nThe current L1 origin block’s timestamp\nCreates a new L1BlockInfoTx from the given information.\nCreates a new L1BlockInfoTx from the given information and …\nA Channel is a set of batches that are split into at least …\nThe channel is closed.\nAn error returned when adding a frame to a channel.\nFJORD_MAX_RLP_BYTES_PER_CHANNEL is the maximum amount of …\nThe frame number is beyond the end frame.\nThe frame id does not match the channel id.\nThe frame number is already in the channel.\nMAX_RLP_BYTES_PER_CHANNEL is the maximum amount of bytes …\nAdd a frame to the channel.\nTrue if the last frame has been buffered\nEstimated memory size, used to drop the channel if we have …\nReturns all of the channel’s Frames concatenated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest frame number that has been ingested\nThe highest L1 inclusion block that a frame was included in\nReturns the current ChannelId for the channel.\nThe unique identifier for this channel\nStore a map of frame number to frame for constant time …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the channel is empty.\nReturns <code>true</code> if the channel is ready to be read.\nThe frame number of the frame where <code>is_last</code> is true No …\nReturns the number of frames ingested.\nCreate a new Channel with the given ChannelId and BlockInfo…\nThe block that the channel is currently open at\nReturns the block number of the L1 block that contained …\nReturns the estimated size of the channel including Frame …\nDeposit log event abi signature.\nDeposit event abi hash.\nThe initial version of the deposit event log.\nAn op_alloy_consensus::TxDeposit validation error.\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nFailed to decode the <code>from</code> field of the deposit event (the …\nFailed to decode the deposit gas value.\nIncomplete opaqueData slice header (incomplete length).\nInvalid opaque data content length.\nInvalid opaque data content offset.\nInvalid deposit event selector. Expected: B256 (deposit …\nAn invalid deposit version.\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nFailed to decode the deposit mint value.\nOpaque data length exceeds the deposit log event data …\nOpaque data with padding exceeds the specified data length.\nFailed to decode the <code>to</code> field of the deposit event (the …\nThe log data is not aligned to 32 bytes.\nUnexpected opaque data length\nUnexpected number of deposit event log topics.\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nDerives a deposit transaction from an EVM log event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe intent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 block hash.\nThe L1 block hash.\nThe log index.\nCreates a new UserDepositSource.\nCreates a new L1InfoDepositSource.\nCreates a new UpgradeDepositSource.\nThe sequence number.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nUnmarshals a deposit transaction from the opaque data.\nThe version of the derivation pipeline.\nFrame data length mismatch.\nThe frame data is too large.\nThe frame data is too short.\nCount the tagging info as 200 in terms of buffer size.\nA channel frame is a segment of a channel’s data.\nA frame decoding error.\nError parsing the frame data.\nFrame parsing error.\nError decoding the frame data length.\nError decoding the frame id.\nError decoding the frame number.\nFrames cannot be larger than 1MB.\nNo frames to parse.\nNo frames decoded.\nUnsupported derivation version.\nThe data within the frame.\nDecode a frame from a byte vector.\nEncode the frame into a byte vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique idetifier for the frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the frame is the last in the sequence.\nThe number of the frame.\nParse the on chain serialization of frame(s) in an L1 …\nCalculates the size of the frame + overhead for storing …\nReturns if the given <code>value</code> is a deposit transaction.")